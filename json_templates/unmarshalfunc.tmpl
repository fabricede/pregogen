// {{- /* Go Template */ -}}.
{{- define "parsefield"}}
    {{- if isArray .FieldType -}}
        {{- template "parsearray" . -}}
    {{- else if eq .FieldType "string" -}}{{template "parsebasic" .}}
    {{- else if eq .FieldType "bool" -}}{{template "parsebasic" .}}
    {{- else if or (eq .FieldType "int")  (eq .FieldType "int16") (eq .FieldType "int32") (eq .FieldType "int64") -}}{{template "parsebasic" .}}
    {{- else if or (eq .FieldType "uint") (eq .FieldType "uint16") (eq .FieldType "uint32") (eq .FieldType "uint64") -}}{{template "parsebasic" .}}
    {{- else if or (eq .FieldType "float32") (eq .FieldType "float64") -}}{{template "parsebasic" .}}
    {{- else if or (eq .FieldType "int8") (eq .FieldType "uint8") (eq .FieldType "byte") -}}{{template "parsebasic" .}}
    {{- else if eq .FieldType "time.Time" -}}{{template "parsebasic" .}}
    {{- else if eq .FieldType "*string" -}}{{template "parsepointer" .}}
    {{- else if eq .FieldType "*bool" -}}{{template "parsepointer" .}}
    {{- else if or (eq .FieldType "*int") (eq .FieldType "*int16") (eq .FieldType "*int32") (eq .FieldType "*int64") -}}{{template "parsepointer" .}}
    {{- else if or (eq .FieldType "*uint") (eq .FieldType "*uint16") (eq .FieldType "*uint32") (eq .FieldType "*uint64") -}}{{template "parsepointer" .}}
    {{- else if or (eq .FieldType "*float32") (eq .FieldType "*float64") -}}{{template "parsepointer" .}}
    {{- else if or (eq .FieldType "*int8") (eq .FieldType "*uint8") (eq .FieldType "*byte") -}}{{template "parsepointer" .}}
    {{- else if eq .FieldType "*time.Time" -}}{{template "parsepointer" .}}
    {{- else -}}{{template "parsebasic" .}}
    {{- end -}}
{{end -}}

{{define "parsefloat32"}}
    var dffloat{{.FieldName}} float64
    dffloat{{.FieldName}}, err{{.FieldName}} = strconv.ParseFloat(sdata[field.begin:dataEnd+1], 32)
    df{{.FieldName}} = float32(dffloat{{.FieldName}})
{{end}}

{{define "parsefloat64"}}
    df{{.FieldName}}, err{{.FieldName}} = strconv.ParseFloat(sdata[field.begin:dataEnd+1], 64)
{{end}}

{{define "parseint"}}
    var dfint64{{.FieldName}} int64
    dfint64{{.FieldName}}, err{{.FieldName}} = strconv.ParseInt(sdata[field.begin:dataEnd+1], 10, 64)
    {{ if eq .FieldType "int" }}
    df{{.FieldName}} = int(dfint64{{.FieldName}})
    {{ else if eq .FieldType "int16" }}
    df{{.FieldName}} = int16(dfint64{{.FieldName}})
    {{ else if eq .FieldType "int32" }}
    df{{.FieldName}} = int32(dfint64{{.FieldName}})
    {{ else if eq .FieldType "int64" }}
    df{{.FieldName}} = dfint64{{.FieldName}}
    {{ else if eq .FieldType "uint" }}
    df{{.FieldName}} = uint(dfint64{{.FieldName}})
    {{ else if eq .FieldType "uint16" }}
    df{{.FieldName}} = uint16(dfint64{{.FieldName}})
    {{ else if eq .FieldType "uint32" }}
    df{{.FieldName}} = uint32(dfint64{{.FieldName}})
    {{ else if eq .FieldType "uint64" }}
    df{{.FieldName}} = uint64(dfint64{{.FieldName}})
    {{ end }}
{{end}}

{{define "parseintbis"}}
    pos := field.begin
    df{{.FieldName}}isNegative := sdata[pos] == '-'
    if df{{.FieldName}}isNegative {
        {{ if or (eq .FieldType "uint64") (eq .FieldType "uint32") (eq .FieldType "uint16") (eq .FieldType "uint") }}
        err = errors.New("invalid negative number")
        {{ else }}
        pos++
        {{ end }}
    }

    {{ if or (eq .FieldType "uint64") (eq .FieldType "uint32") (eq .FieldType "uint16") (eq .FieldType "uint") }}
    if err == nil {
    {{ end }}
        for pos < dataEnd+1 && sdata[pos] >= '0' && sdata[pos] <= '9' {
            df{{.FieldName}} = df{{.FieldName}}*10 + int(sdata[pos]-'0')
            pos++
        }
    {{ if or (eq .FieldType "uint64") (eq .FieldType "uint32") (eq .FieldType "uint16") (eq .FieldType "uint") }}
    }
    {{ end }}

    {{ if or (eq .FieldType "uint64") (eq .FieldType "uint32") (eq .FieldType "uint16") (eq .FieldType "uint") }}
    if err == nil && pos != field.begin {
    {{ else }}
    if pos == field.begin || (df{{.FieldName}}isNegative && pos == field.begin+1) {
        err = errors.New("invalid number")
    } else {
    {{ end }}
        if df{{.FieldName}}isNegative {
            df{{.FieldName}} = -df{{.FieldName}}
        }
    {{ if or (eq .FieldType "uint64") (eq .FieldType "uint32") (eq .FieldType "uint16") (eq .FieldType "uint") }}
    } else if err == nil {
        err = errors.New("invalid number")
    {{ end }}
    }
{{end}}

{{define "parsebool"}}
    df{{.FieldName}} = (sdata[field.begin:dataEnd+1] == "true")
{{end}}

{{define "parsebyte"}}
    var dfbyte{{.FieldName}} int64
    dfbyte{{.FieldName}}, err{{.FieldName}} = strconv.ParseInt(sdata[field.begin:dataEnd+1], 10, 8)
    df{{.FieldName}} = byte(dfbyte{{.FieldName}})
{{end}}

{{define "parsetime"}}
    df{{.FieldName}}, err{{.FieldName}} = time.Parse({{.FieldName}}Format, sdata[field.begin+1:dataEnd])
{{end}}

{{define "parsestring"}}
    df{{.FieldName}} = sdata[field.begin+1 : dataEnd]
{{end}}

{{define "parsebase64"}}
    df{{.FieldName}}, err{{.FieldName}} = base64.StdEncoding.DecodeString(sdata[field.begin+1:dataEnd])
{{end}}

{{define "parseother"}}
    err{{.FieldName}} = json.Unmarshal([]byte(sdata[field.begin:dataEnd+1]), &df{{.FieldName}})
{{end}}

{{- define "parsebasic" -}}
    {{ if eq .Pointer "&" }}
    {{ $pfieldType := (getPointerType .FieldType) }}
    var df{{.FieldName}} {{$pfieldType}}
    {{ else }}
    var df{{.FieldName}} {{.FieldType}}
    {{ end }}
    var err{{.FieldName}} error
    {{- if or (eq .FieldType "int") (eq .FieldType "int16") (eq .FieldType "int32") (eq .FieldType "int64") -}}
        {{- template "parseint" .}}
    {{- else if or (eq .FieldType "uint") (eq .FieldType "uint16") (eq .FieldType "uint32") (eq .FieldType "uint64") -}}
        {{- template "parseint" .}}
    {{- else if eq .FieldType "float64" -}}
        {{- template "parsefloat64" .}}
    {{- else if eq .FieldType "float32" -}}
        {{- template "parsefloat32" .}}
    {{- else if eq .FieldType "time.Time" -}}
        {{- template "parsetime" .}}
    {{- else if eq .FieldType "string" -}}
        {{- template "parsestring" .}}
    {{- else if eq .FieldType "byte" -}}
        {{- template "parsebyte" .}}
    {{- else if eq .FieldType "[]byte" -}}
        {{- template "parsebase64" .}}
    {{- else if eq .FieldType "bool" -}}
        {{- template "parsebool" .}}
    {{- else -}}
        {{- template "parseother" .}}
    {{- end -}}
    if err{{.FieldName}} != nil {
        err = err{{.FieldName}}
    } else {
        {{.ReceiverName}}.{{.FieldName}} = {{.Pointer}}df{{.FieldName}}
    }
{{- end -}}

{{define "parsepointer"}}
    if len(sdata) >= field.begin+4 && string(sdata[field.begin:field.begin+4]) == "null" {
        {{.ReceiverName}}.{{.FieldName}} = nil
    } else {
        {{- template "parsebasic" dict "FieldName" .FieldName "FieldType" (getPointerType .FieldType) "ReceiverName" .ReceiverName "Pointer" "&" -}}
    }
{{end}}