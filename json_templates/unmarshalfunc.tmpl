// {{- /* Go Template */ -}}.
{{- define "parsefield"}}
    {{- if isArray .FieldType -}}
        {{- template "parsearray" . -}}
    {{- else if eq .FieldType "string" -}}{{template "parsebasic" .}}
    {{- else if eq .FieldType "bool" -}}{{template "parsebasic" .}}
    {{- else if or (eq .FieldType "int")  (eq .FieldType "int16") (eq .FieldType "int32") (eq .FieldType "int64") -}}{{template "parsebasic" .}}
    {{- else if or (eq .FieldType "uint") (eq .FieldType "uint16") (eq .FieldType "uint32") (eq .FieldType "uint64") -}}{{template "parsebasic" .}}
    {{- else if or (eq .FieldType "float32") (eq .FieldType "float64") -}}{{template "parsebasic" .}}
    {{- else if or (eq .FieldType "int8") (eq .FieldType "uint8") (eq .FieldType "byte") -}}{{template "parsebasic" .}}
    {{- else if eq .FieldType "time.Time" -}}{{template "parsebasic" .}}
    {{- else if eq .FieldType "*string" -}}{{template "parsepointer" .}}
    {{- else if eq .FieldType "*bool" -}}{{template "parsepointer" .}}
    {{- else if or (eq .FieldType "*int") (eq .FieldType "*int8") (eq .FieldType "*int16") (eq .FieldType "*int32") (eq .FieldType "*int64") -}}{{template "parsepointer" .}}
    {{- else if or (eq .FieldType "*uint") (eq .FieldType "*uint8") (eq .FieldType "*uint16") (eq .FieldType "*uint32") (eq .FieldType "*uint64") -}}{{template "parsepointer" .}}
    {{- else if or (eq .FieldType "*float32") (eq .FieldType "*float64") -}}{{template "parsepointer" .}}
    {{- else if or (eq .FieldType "*int8") (eq .FieldType "*uint8") (eq .FieldType "*byte") -}}{{template "parsepointer" .}}
    {{- else if eq .FieldType "*time.Time" -}}{{template "parsepointer" .}}
    {{- else -}}{{template "parsebasic" .}}
    {{- end -}}
{{end -}}

{{define "parsefloat32"}}
    df{{.FieldName}}, e{{.FieldName}} := strconv.ParseFloat(sdata[field.begin:dataEnd+1], 32)
    if e{{.FieldName}} != nil {
        err = e{{.FieldName}}
    } else {
        {{.ReceiverName}}.{{.FieldName}} = float32(df{{.FieldName}})
    }
{{end}}

{{define "parsefloat64"}}
    df{{.FieldName}}, e{{.FieldName}} := strconv.ParseFloat(sdata[field.begin:dataEnd+1], 64)
    if e{{.FieldName}} != nil {
        err = e{{.FieldName}}
    } else {
        {{.ReceiverName}}.{{.FieldName}} = df{{.FieldName}}
    }
{{end}}

{{define "parseint"}}
    df{{.FieldName}}, e{{.FieldName}} := strconv.ParseInt(sdata[field.begin:dataEnd+1], 10, 64)
    if e{{.FieldName}} != nil {
        err = e{{.FieldName}}
    } else {
        {{.ReceiverName}}.{{.FieldName}} = int(df{{.FieldName}})
    }
{{end}}

{{define "parseuint"}}
    df{{.FieldName}}, e{{.FieldName}} := strconv.ParseInt(sdata[field.begin:dataEnd+1], 10, 64)
    if e{{.FieldName}} != nil {
        err = e{{.FieldName}}
    } else {
        {{.ReceiverName}}.{{.FieldName}} = uint(df{{.FieldName}})
    }
{{end}}

{{define "parsebool"}}
    {{.ReceiverName}}.{{.FieldName}} = (sdata[field.begin:dataEnd+1] == "true")
{{end}}

{{define "parsebyte"}}
    df{{.FieldName}}, e{{.FieldName}} := strconv.ParseInt(sdata[field.begin:dataEnd+1], 10, 8)
    if e{{.FieldName}} != nil {
        err = e{{.FieldName}}
    } else {
        {{.ReceiverName}}.{{.FieldName}} = byte(df{{.FieldName}})
    }
{{end}}

{{define "parsetime"}}
    df{{.FieldName}}, e{{.FieldName}} := time.Parse({{.FieldName}}Format, sdata[field.begin+1:dataEnd])
    if e{{.FieldName}} != nil {
        err = e{{.FieldName}}
    } else {
        {{.ReceiverName}}.{{.FieldName}} = df{{.FieldName}}
    }
{{end}}

{{define "parsestring"}}
    {{.ReceiverName}}.{{.FieldName}} = sdata[field.begin+1 : dataEnd]
{{end}}

{{define "parsebase64"}}
    df{{.FieldName}}, e{{.FieldName}} := base64.StdEncoding.DecodeString(sdata[field.begin+1:dataEnd])
    if e{{.FieldName}} != nil {
        err = e{{.FieldName}}
    } else {
        {{.ReceiverName}}.{{.FieldName}} = df{{.FieldName}}
    }
{{end}}

{{define "parseother"}}
    fmt.Sprint({{.Value}})
{{end}}

{{- define "parsebasic" -}}
    {{- if or (eq .FieldType "int") (eq .FieldType "int16") (eq .FieldType "int32") (eq .FieldType "int64") -}}
        {{- template "parseint" .}}
    {{- else if or (eq .FieldType "uint") (eq .FieldType "uint16") (eq .FieldType "uint32") (eq .FieldType "uint64") -}}
        {{- template "parseuint" .}}
    {{- else if eq .FieldType "float64" -}}
        {{- template "parsefloat64" .}}
    {{- else if eq .FieldType "float32" -}}
        {{- template "parsefloat32" .}}
    {{- else if eq .FieldType "time.Time" -}}
        {{- template "parsetime" .}}
    {{- else if eq .FieldType "string" -}}
        {{- template "parsestring" .}}
    {{- else if eq .FieldType "byte" -}}
        {{- template "parsebyte" .}}
    {{- else if eq .FieldType "[]byte" -}}
        {{- template "parsebase64" .}}
    {{- else if eq .FieldType "bool" -}}
        {{- template "parsebool" .}}
    {{- else -}}
        {{- template "parseother" .}}
    {{- end -}}
{{- end -}}