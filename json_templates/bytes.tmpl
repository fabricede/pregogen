// {{- /* Go Template */ -}}.
{{- define "byte" -}}
    {{- $final := "\"" -}}
    {{ if eq .Last "true" -}}
        {{- $final = "}\"" -}}
    {{- end -}}
    switch {{.Value}} {
    {{if eq .FieldType "int8"}}
        {{ range seq -128 256 -}}
    case {{.}}:
        {{ method $.Method $.Start $.Header }}{{$.JSONName}}{{.}}{{ method $.Method $.End $final }}
        {{- end -}}
    {{ else -}}
        {{ range seq 0 256 -}}
    case {{.}}:
        {{ method $.Method $.Start $.Header }}{{$.JSONName}}{{.}}{{ method $.Method $.End $final }}
        {{- end -}}
    {{- end -}}
    }
{{ end -}}

{{- define "bytearray" -}}
    for i, v := range {{.Value}} {
        switch v {
    {{if eq .FieldType "int8"}}
        {{ range seq -128 256 }}
    case {{.}}:
        if i > 0 {
            {{ method $.Method "start" "\"" }},{{.}}{{ method $.Method "end" "\"" }}
        } else {
            {{- method $.Method $.Start $.Header }}{{$.JSONName}}[{{.}}{{ method $.Method $.End "\"" }}
        }
        {{- end -}}
    {{ else -}}
        {{ range seq 0 256 }}
    case {{.}}:
        if i > 0 {
            {{ method $.Method "start" "\"" }},{{.}}{{ method $.Method "end" "\"" }}
        } else {
            {{- method $.Method $.Start $.Header }}{{$.JSONName}}[{{.}}{{ method $.Method $.End "\"" }}
        }
        {{- end -}}
    }
    {{ end }}
    }
    {{ if eq .Last "true" -}}
        {{ method .Method "start" "" }}"]}"{{ method .Method "end" "" }}
    {{- end -}}
{{- end -}}

{{- define "pointerbyte" -}}
    {{- $final := "\"" -}}
    {{ if eq .Last "true" -}}
        {{- $final = "}\"" -}}
    {{- end -}}
    if {{.Value}} != nil {
        switch *{{.Value}} {
        {{if eq .FieldType "int8"}}
            {{ range seq -128 256 -}}
        case {{.}}:
            {{ method $.Method $.Start $.Header }}{{$.JSONName}}{{.}}{{ method $.Method $.End $final }}
            {{- end -}}
        {{ else -}}
            {{ range seq 0 256 -}}
        case {{.}}:
            {{ method $.Method $.Start $.Header }}{{$.JSONName}}{{.}}{{ method $.Method $.End $final }}
            {{- end -}}
        {{- end -}}
        }
    } else {
        {{- method .Method .Start .Header }}{{.JSONName}}null{{ method .Method .End $final -}}
    }
{{ end -}}

{{- define "bytevalue" -}}
var byteValue_{{.Method}} map[byte]string

func init() {
	byteValue_{{.Method}} = make(map[byte]string)
	for i := 0; i < 256; i++ {
		byteValue_{{.Method}}[byte(i)] = strconv.Itoa(int(i))
	}
}
{{- end -}}

{{- define "bytebis" -}}
    {{- method .Method .Start .Header }}{{.JSONName}}{{ method .Method .End "\"" -}}
    {{ method .Method "start" "" }}byteValue_{{.Method}}[{{.Value}}]{{ method .Method "end" "" -}}
    {{ if eq .Last "true" -}}
        {{ method .Method "start" "" }}"}"{{ method .Method "end" "" }}
    {{- end -}}
{{ end -}}
