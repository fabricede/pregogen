{{- /* Go Template */ -}}
{{define "jsontest"}}
package {{.Package}}

{{ $containsdate := false -}}
{{- range $i, $field := .Fields -}}
   	{{- if or (eq .FieldType "time.Time") (eq .FieldType "[]time.Time") (eq .FieldType "*time.Time") (eq .FieldType "[]*time.Time") -}}
        {{- $containsdate = true -}}
		{{- break -}}
    {{- end -}}
{{- end -}}
import (
    "encoding/json"
	"reflect"
	"testing"
	"log"
	"strconv"
	{{ if $containsdate -}}
	"time"
	{{- end }}
)

type {{.TypeName}}Ref struct {
{{range $i, $field := .Fields }}
	{{$field.Name}}  {{ $field.FieldType }} `json:"{{$field.JSONName}}"`
{{- end}}
}

type {{.TypeName}}Test struct {
	name    string
	fields  {{.TypeName}}Ref
	want    []byte
}

func init() {
	// use json.Marshal to generate expected []byte for each example
	for i, example := range {{.TypeName}}_examples {
		want, err := json.Marshal(example.{{.TypeName}})
		if err != nil {
			panic(err)
		}
		{{.TypeName}}_examples[i].want = want
	}
}

{{- if or (eq .Gentype "testMarshal") (eq .Gentype "testAll") -}}
/*
   Test{{.TypeName}}_MarshalJSON
*/
func Test{{.TypeName}}_MarshalJSON(t *testing.T) {
	var tests []{{.TypeName}}Test
	for i, example := range {{$.TypeName}}_examples {
		tests = append(tests, {{$.TypeName}}Test{name: "Test" + strconv.Itoa(i),
			fields: {{.TypeName}}Ref{
		{{range $i, $field := .Fields }}
				{{$field.Name}}:  example.{{$.TypeName}}.{{$field.Name}},
        {{- end }}},
			want: example.want,
		})
	}
	for _, tt := range tests {
		y := {{.TypeName}}{
        {{ range $i, $field := .Fields }}
			{{$field.Name}}:  tt.fields.{{$field.Name}},
        {{- end }}
		}
		yRef := {{.TypeName}}Ref{
		{{ range $i, $field := .Fields }}
			{{$field.Name}}:  tt.fields.{{$field.Name}},
        {{- end }}
		}
		t.Run(tt.name+"_MarshalJSON_bytesBuffer", func(t *testing.T) {
			got, err := y.MarshalJSON_bytesBuffer()
			if err != nil {
				t.Errorf("{{.TypeName}}.MarshalJSON() error = %v", err)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("{{.TypeName}}.MarshalJSON() = %v  <-- want --> %v", string(got), string(tt.want))
			}
		})
		t.Run(tt.name+"_MarshalJSON_append", func(t *testing.T) {
			got, err := y.MarshalJSON_append()
			if err != nil {
				t.Errorf("{{.TypeName}}.MarshalJSON() error = %v", err)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("{{.TypeName}}.MarshalJSON() = %v  <-- want --> %v", string(got), string(tt.want))
			}
		})
		t.Run(tt.name+"_MarshalJSON_plus", func(t *testing.T) {
			got, err := y.MarshalJSON_plus()
			if err != nil {
				t.Errorf("{{.TypeName}}.MarshalJSON() error = %v", err)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("{{.TypeName}}.MarshalJSON() = %v  <-- want --> %v", string(got), string(tt.want))
			}
		})
		t.Run(tt.name+"_json.Marshal", func(t *testing.T) {
			got, err := json.Marshal(y)
			if err != nil {
				t.Errorf("json.Marshal({{.TypeName}}) error = %v", err)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("json.Marshal({{.TypeName}}) = %v  <-- want --> %v", string(got), string(tt.want))
			}
		})
		t.Run(tt.name+"_ref", func(t *testing.T) {
			got, err := json.Marshal(yRef)
			if err != nil {
				t.Errorf("{{.TypeName}}Ref.MarshalJSON() error = %v", err)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("{{.TypeName}}Ref.MarshalJSON() = %v  <-- want --> %v", string(got), string(tt.want))
			}
		})
	}
}

/*
   Benchmark{{.TypeName}}_MarshalJSON
*/
func Benchmark{{.TypeName}}_MarshalJSON(b *testing.B) {
	tests := []struct {
		name    string
		fields  {{.TypeName}}Ref
	}{
		{name: "Test1", fields: {{.TypeName}}Ref{
		{{ range $i, $field := .Fields }}
			{{$field.Name}}:  {{$.TypeName}}_examples[0].{{$.TypeName}}.{{$field.Name}},
        {{- end }}},
		},
	}
	var a_append, a_plus, a_bytesBuffer []byte
	for _, tt := range tests {
		y := {{.TypeName}}{
        {{ range $i, $field := .Fields }}
			{{$field.Name}}:  tt.fields.{{$field.Name}},
        {{- end }}
		}
		yRef := {{.TypeName}}Ref{
		{{ range $i, $field := .Fields }}
			{{$field.Name}}:  tt.fields.{{$field.Name}},
        {{- end }}
		}
		b.Run(tt.name+"_MarshalJSON_bytesBuffer", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				a_bytesBuffer, _ = y.MarshalJSON_bytesBuffer()
			}
		})
		b.Run(tt.name+"_MarshalJSON_plus", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				a_plus, _ = y.MarshalJSON_plus()
			}
		})
		b.Run(tt.name+"_MarshalJSON_append", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				a_append, _ = y.MarshalJSON_append()
			}
		})
		b.Run(tt.name+"_json.Marshal_bytesBuffer", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				_, _ = json.Marshal(y)
			}
		})
		b.Run(tt.name+"_ref", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				_, _ = json.Marshal(yRef)
			}
		})
		log.Println("a_bytesBuffer: ", string(a_bytesBuffer), " a_plus: ", string(a_plus), " a_append :", string(a_append))
	}
}
{{end}}

{{- if or (eq .Gentype "testUnmarshal") (eq .Gentype "testAll") -}}
/*
   Test{{.TypeName}}_UnmarshalJSON
*/
func Test{{.TypeName}}_UnmarshalJSON(t *testing.T) {
	var tests []{{.TypeName}}Test
	for i, example := range {{$.TypeName}}_examples {
		tests = append(tests, {{$.TypeName}}Test{name: "Test" + strconv.Itoa(i),
			fields: {{.TypeName}}Ref{
		{{range $i, $field := .Fields }}
				{{$field.Name}}:  example.{{$.TypeName}}.{{$field.Name}},
        {{- end }}},
			want: example.want,
		})
	}
	for _, tt := range tests {
		want := {{.TypeName}}{
        {{ range $i, $field := .Fields }}
			{{$field.Name}}:  tt.fields.{{$field.Name}},
        {{- end }}
		}
		got := {{.TypeName}}{}
		t.Run(tt.name+"_UnarshalJSON", func(t *testing.T) {
			if err := got.UnmarshalJSON(tt.want); err != nil {
				t.Errorf("{{.TypeName}}.UnmarshalJSON() error = %v", err)
				return
			}
			if !reflect.DeepEqual(got, want) {
				t.Errorf("YourType2.UnmarshalJSON() = %v  <-- want --> %v", got, want)
			}
		})
		got2 := {{.TypeName}}{}
		t.Run(tt.name+"_json.Unmarshal", func(t *testing.T) {
			if err := json.Unmarshal(tt.want, &got2); err != nil {
				t.Errorf("{{.TypeName}}.UnmarshalJSON() error = %v", err)
				return
			}
			if !reflect.DeepEqual(got2, want) {
				t.Errorf("YourType2.UnmarshalJSON() = %v  <-- want --> %v", got, want)
			}
		})
		yRef := {{.TypeName}}Ref{}
		t.Run(tt.name+"_json.Unmarshal_ref", func(t *testing.T) {
			if err := json.Unmarshal(tt.want, &yRef); err != nil {
				t.Errorf("json.Unmarshal({{.TypeName}}) error = %v", err)
			}
			if !reflect.DeepEqual(yRef, tt.fields) {
				t.Errorf("json.Unmarshal({{.TypeName}} = %v  <-- want --> %v", got, tt.fields)
			}
		})
	}
}

/*
   Benchmark{{.TypeName}}_UnmarshalJSON
*/
func Benchmark{{.TypeName}}_UnmarshalJSON(b *testing.B) {
	tests := []struct {
		name    string
		fields  {{.TypeName}}Ref
		want	[]byte
	}{
		{name: "Test1", fields: {{.TypeName}}Ref{
		{{ range $i, $field := .Fields }}
			{{$field.Name}}:  {{$.TypeName}}_examples[0].{{$.TypeName}}.{{$field.Name}},
        {{- end }}},
		want: {{$.TypeName}}_examples[0].want,
		},
	}
	for _, tt := range tests {
		got := &{{.TypeName}}{}
		b.Run(tt.name+"_UnmarshalJSON", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				got.UnmarshalJSON(tt.want)
			}
		})
		got2 := &{{.TypeName}}{}
		b.Run(tt.name+"_json.Unmarshal", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				json.Unmarshal(tt.want, got2)
			}
		})
		yRef := &{{.TypeName}}Ref{}
		b.Run(tt.name+"_json.Unmarshal_ref", func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				json.Unmarshal(tt.want, yRef)
			}
		})
	}
}
{{end}}
{{end}}