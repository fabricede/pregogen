// {{- /* Go Template */ -}} This file is generated by pregogen.
{{- /* set construction variables */ -}}
{{- $method := .Gentype -}}

// generate type: {{ .Gentype }}
{{- if eq .Gentype "test" -}}
    {{ template "test" . }}
    {{ return }}
{{ end }}
// This file is generated by pregogen.
package {{.Package}}

{{ $imports := (len .Includes) }}
{{- $lastIndex := sub (len .Fields) 1 -}}
{{- $uniquebool := false -}}
{{- $uniquearraybool := false -}}
{{- $containsbytes := false -}}
{{- range $i, $field := .Fields -}}
    {{- if and (eq .FieldType "bool") (eq $lastIndex $i) ( eq $i 0) }}
        {{- $uniquebool = true -}}
    {{- else if and (eq .FieldType "[]bool") (eq $lastIndex $i) ( eq $i 0) }}
        {{- $uniquearraybool = true -}}
    {{- end -}}
    {{- if or (eq .FieldType "byte") (eq .FieldType "int8") (eq .FieldType "uint8") }}
        {{- $containsbytes = true -}}
    {{- end -}}
{{- end -}}
{{- if $uniquebool -}}
    {{ template "uniqueBool" . }}
    {{ return }}
{{- end -}}
{{ if or (gt $imports 0) (eq $method "bytesBuffer") }}
import (
    {{ if eq $method "bytesBuffer" -}}
    "bytes"
    {{- end }}
    {{ range $include := .Includes }}
    "{{$include}}"
    {{ end }}
)
{{ end -}}

{{- /* if $containsbytes */ -}}
    {{/* template "bytevalue" dict "Method" $method */}}
{{/* end */}}

func ({{.ReceiverName}} {{.TypeName}}) MarshalJSON_{{$method}}() ([]byte, error) { 
    {{$previousType := ""}}
    {{$previousArray := false}}
    {{$start := "firststart"}}
    {{$last := false}}
    {{range $i, $field := .Fields}}
        {{- if eq $i 0 }}
            {{- method $method "declareVar" "" }}
        {{- else -}}
            {{- $start = "start" -}}
        {{- end -}}

        {{- $header := "\"," -}}
        {{- $end := "end" -}}
        {{- if eq $start "firststart" -}}
            {{- $header = "\"{" -}}
            {{- $end = "firstend" -}}
        {{- else if or (eq $previousType "string") (eq $previousType "time.Time") -}}
            {{- $header = "\"\\\"," -}}
        {{- end -}}

        {{- $final := "\"" -}}
        {{- if eq $i $lastIndex }}
            {{- $last = true -}}
            {{- $final = "}\"" -}}
        {{- end -}}

        {{- /* package the line with value */ -}}
        {{- template "fieldValue" dict "FieldName" $field.Name "FieldType" $field.FieldType "Method" $method "Value" (printf "%s.%s" $.ReceiverName $field.Name ) "JSONName" (printf "\\\"%s\\\":" $field.JSONName) "Name" $field.JSONName "Start" (print $start) "End" (printf $end) "PreviousType" (print $previousType) "PreviousArray" (print $previousArray) "Header" $header "Last" (print $last) "Final" $final -}}

        {{- $previousType = (print $field.FieldType) -}}
        {{- if isArray .FieldType -}}
            {{- $previousArray = true -}}
        {{- else -}}
            {{- $previousArray = false -}}
        {{- end -}}
    {{end}}
    {{ method $method "finalReturn" "" }}
}