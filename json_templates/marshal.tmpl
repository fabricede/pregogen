// {{- /* Go Template */ -}} This file is generated by pregogen.

{{- define "jsonStart"}}{\"{{.JSONName}}\":{{end -}}
{{- define "fieldValue"}}
    {{- if eq .FieldType "string" -}}{{template "string" .}}
    {{- else if eq .FieldType "bool" -}}{{template "bool" .}}
    {{- else if eq .FieldType "[]bool" -}}{{template "array" .}}
    {{- else if or (eq .FieldType "int") (eq .FieldType "int8") (eq .FieldType "int16") (eq .FieldType "int32") (eq .FieldType "int64") -}}{{template "int" .}}
    {{- else if or (eq .FieldType "uint") (eq .FieldType "uint8") (eq .FieldType "uint16") (eq .FieldType "uint32") (eq .FieldType "uint64") -}}{{template "int" .}}
    {{- else if or (eq .FieldType "float32") (eq .FieldType "float64") -}}{{template "float" .}}
    {{- else -}}{{template "other" .}}
    {{- end -}}
{{end -}}

{{- /* set construction variables */ -}}
{{- $method := .Gentype -}}

// generate type: {{ .Gentype }}
{{- if eq .Gentype "test" -}}
    {{ template "test" . }}
    {{ return }}
{{ end }}
// This file is generated by pregogen.
package {{.Package}}

{{ $imports := (len .Includes) }}
{{- $lastIndex := sub (len .Fields) 1 -}}
{{- $uniquebool := false -}}
{{- $uniquearraybool := false -}}
{{- range $i, $field := .Fields -}}
    {{- $uniquebool = (and (eq .FieldType "bool") (eq $lastIndex $i) ( eq $i 0)) -}}
    {{- $uniquearraybool = (and (eq .FieldType "[]bool") (eq $lastIndex $i) ( eq $i 0)) -}}
    {{- break -}}
{{- end -}}
{{ if and $uniquebool }}
    {{ template "uniqueBool" . }}
    {{ return }}
{{ end }}
{{ if or (gt $imports 0) (eq $method "bytesBuffer") }}
import (
    {{ if eq $method "bytesBuffer" }}
    "bytes"
    {{ end }}
    {{ range $include := .Includes }}
    "{{$include}}"
    {{ end }}
)
{{ end }}

func ({{.ReceiverName}} {{.TypeName}}) MarshalJSON_{{$method}}() ([]byte, error) { 
    {{$previousType := ""}}
    {{$start := "firststart"}}
    {{$end := "end"}}
    {{range $i, $field := .Fields}}
        {{- if eq $i 0 }}
            {{- method $method "declareVar" "" }}
        {{- else -}}
            {{$start = "start"}}
        {{- end -}}

        {{- if eq $i $lastIndex }}
            {{$end = "lastend"}}
        {{- end -}}

        {{- /* package the line with value */ -}}
        {{- template "fieldValue" dict "FieldType" $field.FieldType "Method" $method "Value" (printf "%s.%s" $.ReceiverName $field.Name ) "JSONName" (printf "\\\"%s\\\":" $field.JSONName) "Name" $field.JSONName "Start" (print $start) "End" (printf $end) "PreviousType" (print $previousType) -}}

        {{- $previousType = (print $field.FieldType) -}}

    {{end}}
    {{- /* if or (gt $lastIndex 0) (not (or (eq $previousType "bool") (eq $previousType "[]bool"))) */ -}}
    {{ method $method "finalReturn" "" }}
    {{/* end */}} 
}