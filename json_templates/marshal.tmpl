// {{- /* Go Template */ -}} This file is generated by pregogen.

{{- define "jsonStart"}}{\"{{.JSONName}}\":{{end -}}
{{- define "fieldValue"}}
    {{- if eq .FieldType "string" -}}{{template "string" .}}
    {{- else if eq .FieldType "bool" -}}{{template "bool" .}}
    {{- else if or (eq .FieldType "int") (eq .FieldType "int8") (eq .FieldType "int16") (eq .FieldType "int32") (eq .FieldType "int64") -}}{{template "int" .}}
    {{- else if or (eq .FieldType "uint") (eq .FieldType "uint8") (eq .FieldType "uint16") (eq .FieldType "uint32") (eq .FieldType "uint64") -}}{{template "int" .}}
    {{- else if or (eq .FieldType "float32") (eq .FieldType "float64") -}}{{template "float" .}}
    {{- else -}}{{template "other" .}}
    {{- end -}}
{{end -}}

{{- /* set construction variables */ -}}
{{- $method := .Gentype -}}
{{- $methodVar := "\n\tvar result bytes.Buffer\n\t" -}}

{{- $methodHeader := "result.WriteString( \"," -}}
{{- $methodHeaderFirst := "result.WriteString( \"{" -}}
{{- $methodHeaderFirstBool := "result.WriteString( \"{" -}}
{{- $methodHeaderUniqueBool := "return ([]byte( \"{" -}}

{{- $methodStart := "\")\n\tresult.WriteString( " -}}
{{- $methodStartFirst := "\")\n\tresult.WriteString( " -}}
{{- $methodStartString := "\\\"\")\n\tresult.WriteString( " -}}
{{- $methodStartFirstString := "\\\"\")\n\tresult.WriteString( " -}}

{{- $methodStop := "" -}}
{{- $methodStopLast := ")\n\tresult.WriteString( \"" -}}
{{- $methodStopString := ")\n\tresult.WriteString( \"\\\"" -}}

{{- $methodNextLine := "\n\t" -}}

{{- $methodFooter := ")" -}}
{{- $methodFooterLast := "}\")" -}}
{{- $methodFooterBool := "\")" -}}
{{- $methodFooterFirstBool := "\")" -}}
{{- $methodFooterUniqueBool := "}\")), nil" -}}

{{- $methodFinalReturn := "\n\treturn result.Bytes(), nil" -}}

// generate type: {{ .Gentype }}
{{- if eq .Gentype "bytesBuffer" -}}
    {{- $method = "bytesBuffer" -}}
{{- else if eq .Gentype "test" -}}
{{ template "test" . }}
{{ return }}
{{- else if eq .Gentype "append" -}}
    {{- /* set construction variables */ -}}
    {{- $method = "append" -}}
    {{- $methodVar = "\n\tvar result []byte\n\t" -}}

    {{- $methodHeader = "result = append(result, \"," -}}
    {{- $methodHeaderFirst = "result := []byte( \"{" -}}
    {{- $methodHeaderFirstBool = "result = []byte( \"{" -}}
    {{- $methodHeaderUniqueBool = "return ([]byte( \"{" -}}

    {{- $methodStart = "\"...)\n\tresult = append(result, " -}}
    {{- $methodStartFirst = "\")\n\tresult = append(result, " -}}
    {{- $methodStartString = "\"...)\n\tresult = append(result, " -}}
    {{- $methodStartFirstString = "\\\"\")\n\tresult = append(result, " -}}

    {{- $methodStop = "" -}}
    {{- $methodStopLast = "...)\n\tresult = append(result, \"" -}}
    {{- $methodStopString = "...)\n\tresult = append(result, \"\\\"" -}}

    {{- $methodNextLine = "\n\t" -}}

    {{- $methodFooter = "...)" -}}
    {{- $methodFooterLast = "}\"...)" -}}
    {{- $methodFooterBool = "\"...)" -}}
    {{- $methodFooterFirstBool = "\")" -}}
    {{- $methodFooterUniqueBool = "}\")), nil" -}}

    {{- $methodFinalReturn = "\n\treturn result, nil" -}}
{{- else if eq .Gentype "plus" -}}
    {{- /* set construction variables */ -}}
    {{- $method = "plus" -}}
    {{- $methodVar = "\n\tvar result string\n\t" -}}

    {{- $methodHeader = "result += \"," -}}
    {{- $methodHeaderFirst = "result := \"{" -}}
    {{- $methodHeaderFirstBool = "result = \"{" -}}
    {{- $methodHeaderUniqueBool = "return ([]byte( \"{" -}}

    {{- $methodStart = "\"+" -}}
    {{- $methodStartFirst = "\"+" -}}
    {{- $methodStartString = "\\\"\"+" -}}
    {{- $methodStartFirstString = "\\\"\"+" -}}

    {{- $methodStop = "" -}}
    {{- $methodStopLast = "+\"" -}}
    {{- $methodStopString = "+ \"\\\"" -}}

    {{- $methodNextLine = "\n\t" -}}

    {{- $methodFooter = "" -}}
    {{- $methodFooterLast = "}\"" -}}
    {{- $methodFooterBool = "\"" -}}
    {{- $methodFooterFirstBool = "\"" -}}
    {{- $methodFooterUniqueBool = "}\")), nil" -}}

    {{- $methodFinalReturn = "\n\treturn []byte(result), nil" -}}
{{end -}}

// This file is generated by pregogen.
package {{.Package}}

{{ $imports := (len .Includes) }}
{{- $lastIndex := sub (len .Fields) 1 -}}
{{- $uniquebool := false -}}
{{- range $i, $field := .Fields -}}
    {{- $uniquebool = (and (eq .FieldType "bool") (eq $lastIndex $i) ( eq $i 0)) -}}
    {{- break -}}
{{- end -}}
{{ if and (not $uniquebool) (or (gt $imports 0) (eq $method "bytesBuffer")) }}
import (
    {{ if eq $method "bytesBuffer" }}
    "bytes"
    {{ end }}
    {{ range $include := .Includes }}
    "{{$include}}"
    {{ end }}
)
{{ end }}


func ({{.ReceiverName}} {{.TypeName}}) MarshalJSON_{{$method}}() ([]byte, error) { 
    {{- $previousType := "" -}}
    {{range $i, $field := .Fields}}
        {{- if and ( eq $i 0) (not $uniquebool) (or (eq $method "bytesBuffer") (eq .FieldType "bool")) }}
            {{- printf $methodVar }}
        {{- end -}}
       
        {{- /* prepare {{.Header}}{{.JSONName}}{{.Start}}...{{.Value}}...{{.Stop}}{{.Footer}} */ -}}
        {{- /* prepare start of line */ -}}
        {{- $header := $methodHeader -}}
        {{- if eq $i 0 -}}
            {{- $header = $methodHeaderFirst -}}
            {{- if and (eq .FieldType "bool") (eq $i $lastIndex) -}}
                {{- $header = $methodHeaderUniqueBool -}}
            {{- else if and (eq .FieldType "bool") -}}
                {{- $header = $methodHeaderFirstBool -}}
            {{- end -}}
        {{- end -}}
        {{- $previousType = (print $field.FieldType) -}}

        {{- /* prepare mid line */ -}}
        {{- $start := $methodStart -}}
        {{- if eq $i 0 -}}
            {{- if eq .FieldType "string" -}}
                {{- $start = $methodStartFirstString -}}
            {{- else -}}
                {{- $start = $methodStartFirst -}}
            {{- end -}}
        {{- else if eq .FieldType "string" -}}
            {{- $start = $methodStartString -}}
        {{- end -}}
        {{- $stop := $methodStop -}}
        {{- if eq $i $lastIndex -}}
            {{- if eq .FieldType "string" -}}
                {{- $stop = $methodStopString -}}
            {{- else  -}}
                {{- $stop = $methodStopLast -}}
            {{- end -}}
        {{- end -}}

        {{- /* prepare end of line */ -}}
        {{- $footer := $methodFooter -}}
        {{- if eq .FieldType "bool" -}}
            {{- if and (eq $i $lastIndex) (eq $i 0) -}}
                {{- $footer = $methodFooterUniqueBool -}}
            {{- else if and (eq $i $lastIndex) -}}
                {{- $footer = $methodFooterLast -}}
            {{- else if and (eq $i 0) -}}
                {{- $footer = $methodFooterFirstBool -}}
            {{- else -}}
                {{- $footer = $methodFooterBool -}}
            {{- end -}}
        {{- else if eq $i $lastIndex -}}
            {{- $footer = $methodFooterLast -}}
        {{- end -}}

        {{- /* package the line with value */ -}}
        {{- template "fieldValue" dict "FieldType" $field.FieldType "Value" (printf "%s.%s" $.ReceiverName $field.Name ) "JSONName" (printf "\\\"%s\\\":" $field.JSONName) "Header" (print $header) "Footer" (printf $footer) "Start" (print $start) "Stop" (printf $stop) -}}

        {{- if not (eq $previousType "bool") }}
        {{- printf $methodNextLine -}}
        {{- end -}}

    {{end}}
    {{- if or (gt $lastIndex 0) (not (eq $previousType "bool")) -}}
    {{ printf $methodFinalReturn }}
    {{ end }} 
}