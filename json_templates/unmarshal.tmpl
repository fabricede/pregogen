// {{- /* Go Template */ -}}
{{define "unmarshal"}}
package {{.Package}}

{{ $imports := (len .Includes) }}
{{- $lastIndex := sub (len .Fields) 1 -}}
{{- $uniquebool := false -}}
{{- $containsbyte := false -}}
{{- $containsunsuported := false -}}
{{- $containsdate := false -}}
{{- range $i, $field := .Fields -}}
    {{- if and (eq .FieldType "bool") (eq $lastIndex $i) ( eq $i 0) }}
        {{ $uniquebool = true }}
    {{- end -}}
    {{- if or (eq .FieldType "byte") (eq .FieldType "int8") (eq .FieldType "uint8") (eq .FieldType "*byte") (eq .FieldType "*int8") (eq .FieldType "*uint8") }}
        {{- $containsbyte = true -}}
	{{- else if or (eq .FieldType "string") (eq .FieldType "*string") }}
	{{- else if or (eq .FieldType "[]string") (eq .FieldType "[]*string") }}
	{{- else if or (eq .FieldType "time.Time") (eq .FieldType "*time.Time")}}
		{{ $containsdate = true }}
	{{- else if or (eq .FieldType "[]time.Time") (eq .FieldType "[]*time.Time") }}
		{{ $containsdate = true }}
	{{- else if or (eq .FieldType "int") (eq .FieldType "int16") (eq .FieldType "int32") (eq .FieldType "int64") }} 
	{{- else if or (eq .FieldType "uint") (eq .FieldType "uint16") (eq .FieldType "uint32") (eq .FieldType "uint64") }} 
	{{- else if or (eq .FieldType "[]int") (eq .FieldType "[]int16") (eq .FieldType "[]int32") (eq .FieldType "[]int64") }} 
	{{- else if or (eq .FieldType "[]uint") (eq .FieldType "[]uint16") (eq .FieldType "[]uint32") (eq .FieldType "[]uint64") }} 
	{{- else if or (eq .FieldType "*int") (eq .FieldType "*int16") (eq .FieldType "*int32") (eq .FieldType "*int64") }} 
	{{- else if or (eq .FieldType "*uint") (eq .FieldType "*uint16") (eq .FieldType "*uint32") (eq .FieldType "*uint64") }}
	{{- else if or (eq .FieldType "[]*int") (eq .FieldType "[]*int16") (eq .FieldType "[]*int32") (eq .FieldType "[]*int64") }} 
	{{- else if or (eq .FieldType "[]*uint") (eq .FieldType "[]*uint16") (eq .FieldType "[]*uint32") (eq .FieldType "[]*uint64") }}
	{{- else if or (eq .FieldType "float32") (eq .FieldType "float64") }}
	{{- else if or (eq .FieldType "*float32") (eq .FieldType "*float64") }}
	{{- else if or (eq .FieldType "[]float32") (eq .FieldType "[]float64") }}
	{{- else if or (eq .FieldType "[]*float32") (eq .FieldType "[]*float64") }}
	{{- else if or (eq .FieldType "bool") (eq .FieldType "*bool") }}
	{{- else if or (eq .FieldType "[]bool") (eq .FieldType "[]*bool") }}
	{{- else if or (eq .FieldType "byte") (eq .FieldType "[]byte") (eq .FieldType "*byte") (eq .FieldType "[]*byte") }}
	{{- else }}
		{{- $containsunsuported = true -}}
	{{- end -}}
{{- end -}}

{{- if $uniquebool -}}
	{{ template "uniqueBool" . }}
	{{ return }}
{{- end -}}

import (
	"strings"
	{{ if $containsbyte -}}
	"strconv"
	{{- end }}
	{{ if $containsdate -}}
	"time"
	{{- end }}
    {{ range $include := .Includes }}
    "{{$include}}"
    {{ end }}
)

func ({{.ReceiverName}} *{{.TypeName}}) UnmarshalJSON(data []byte) (err error) {
    // UnmarshalJSON implements the json.Unmarshaler interface.
	sdata := strings.Trim((string)(data),"}")
	lendata := len(sdata)

	// Define a type that holds both key and Field info.
	type OrderedField struct {
		Key   string
		start int
		begin int
	}

	var orderedFields []OrderedField

	// List expected keys.
	for _, key := range []string{ {{range $i, $field := .Fields}}"{{$field.JSONName}}",{{end}} } {
		posField := strings.Index(sdata, key)
		if posField != -1 {
			// Found the field: store its position info.
			newOf := OrderedField{
				Key:   key,
				start: posField - 2,
				begin: strings.Index(sdata[posField:], ":") + posField + 1,
			}
			inserted := false
			for i, of := range orderedFields {
				if newOf.start < of.start {
					orderedFields = append(orderedFields[:i],
						append([]OrderedField{newOf}, orderedFields[i:]...)...)
					inserted = true
					break
				}
			}
			if !inserted {
				orderedFields = append(orderedFields, newOf)
			}
		}
	}

	for i, field := range orderedFields {
		dataEnd := lendata - 1
		if len(orderedFields) > i+1 {
			dataEnd = orderedFields[i+1].start - 1
		}
		switch field.Key {
        {{range $i, $field := .Fields}}
        case "{{$field.JSONName}}":
            {{- template "parsefield" dict "ReceiverName" $.ReceiverName "FieldName" $field.Name "FieldType" $field.FieldType "Pointer" "" -}}
        {{end}}
		}
	}
	return err
}
{{ end }}