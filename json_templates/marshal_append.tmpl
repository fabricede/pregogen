{{- /* Go Template */ -}}
{{define "append"}}
package {{.Package}}

import (
{{- range $include := .Includes}}
    "{{$include}}"
{{end -}}
)

func ({{.ReceiverName}} {{.TypeName}}) MarshalJSON_append() ([]byte, error) {
    {{$lastIndex := sub (len .Fields) 1}}
    var result []byte
    {{$starttxt := false}}
    {{range $i, $field := .Fields}}
        {{$header := "result = append(result, \"{"}}
        {{- if $i -}}
            {{$header = "result = append(result, \","}}
        {{- end -}}
        {{- if eq $field.FieldType "string" -}}{{- $starttxt = true -}}{{- else -}}{{- $starttxt = false -}}{{- end -}}
        {{$start := "\"+"}}
        {{- if eq .FieldType "bool" -}}
            {{$start = ""}}
        {{- else if eq .FieldType "string" -}}
            {{$start = "\\\"\"+"}}
        {{- end -}}
        {{$stop := "+\""}}
        {{- if eq .FieldType "bool" -}}
            {{$stop = ""}}
        {{- else if eq .FieldType "string" -}}
            {{$stop = "+\"\\\""}}
        {{- end -}}
        {{$footer := "\"...)"}}
        {{- if eq $i $lastIndex -}}
            {{$footer = "}\"...)"}}
        {{- else if eq $stop "+\"" -}}
            {{$footer = "...)"}}
            {{$stop = ""}}
        {{- end -}}
        {{- template "fieldValue" dict "FieldType" $field.FieldType "Value" (printf "%s.%s" $.ReceiverName $field.Name ) "JSONName" (printf "\\\"%s\\\":" $field.JSONName) "Header" (print $header) "Footer" (printf $footer) "Start" (print $start) "Stop" (printf $stop) -}}
    {{end}}
    // final result
    return result, nil
}
{{end}}