{{- /* Go Template */ -}}
{{define "append"}}
package {{.Package}}

{{- /* set construction variables */ -}}
{{- $method := "append" -}}
{{- $methodVar := "\n\tvar result []byte\n\t" -}}

{{- $methodHeader := "result = append(result, \"," -}}
{{- $methodHeaderFirst := "result := []byte( \"{" -}}
{{- $methodHeaderFirstBool := "result = []byte( \"{" -}}
{{- $methodHeaderUniqueBool := "return ([]byte( \"{" -}}

{{- $methodStart := "\"...)\n\tresult = append(result, " -}}
{{- $methodStartFirst := "\")\n\tresult = append(result, " -}}
{{- $methodStartString := "\"...)\n\tresult = append(result, " -}}
{{- $methodStartFirstString := "\\\"\")\n\tresult = append(result, " -}}

{{- $methodStop := "" -}}
{{- $methodStopLast := "...)\n\tresult = append(result, \"" -}}
{{- $methodStopString := "...)\n\tresult = append(result, \"\\\"" -}}

{{- $methodNextLine := "\n\t" -}}

{{- $methodFooter := "...)" -}}
{{- $methodFooterLast := "}\"...)" -}}
{{- $methodFooterBool := "\"...)" -}}
{{- $methodFooterFirstBool := "\")" -}}
{{- $methodFooterUniqueBool := "}\")), nil" -}}

{{- $methodFinalReturn := "\n\treturn result, nil" -}}

{{- $imports := (len .Includes) -}}
{{ if or (gt $imports 0) (eq $method "bytesBuffer") }}
import (
    {{ range $include := .Includes }}
    "{{$include}}"
    {{ end }}
)
{{ end }}
{{ $lastIndex := sub (len .Fields) 1 }}

func ({{.ReceiverName}} {{.TypeName}}) MarshalJSON_{{$method}}() ([]byte, error) { 
    {{- $previousType := "" -}}
    {{range $i, $field := .Fields}}
        {{- $uniquebool := (and (eq .FieldType "bool") (eq $lastIndex $i) ( eq $i 0)) -}}
        {{- if and ( eq $i 0) (not $uniquebool) (or (eq $method "bytesBuffer") (eq .FieldType "bool")) }}
            {{- printf $methodVar }}
        {{- end -}}
       
        {{- /* prepare {{.Header}}{{.JSONName}}{{.Start}}...{{.Value}}...{{.Stop}}{{.Footer}} */ -}}
        {{- /* prepare start of line */ -}}
        {{- $header := $methodHeader -}}
        {{- if eq $i 0 -}}
            {{- $header = $methodHeaderFirst -}}
            {{- if and (eq .FieldType "bool") (eq $i $lastIndex) -}}
                {{- $header = $methodHeaderUniqueBool -}}
            {{- else if and (eq .FieldType "bool") -}}
                {{- $header = $methodHeaderFirstBool -}}
            {{- end -}}
        {{- end -}}
        {{- $previousType = (print $field.FieldType) -}}

        {{- /* prepare mid line */ -}}
        {{- $start := $methodStart -}}
        {{- if eq $i 0 -}}
            {{- if eq .FieldType "string" -}}
                {{- $start = $methodStartFirstString -}}
            {{- else -}}
                {{- $start = $methodStartFirst -}}
            {{- end -}}
        {{- else if eq .FieldType "string" -}}
            {{- $start = $methodStartString -}}
        {{- end -}}
        {{- $stop := $methodStop -}}
        {{- if eq $i $lastIndex -}}
            {{- if eq .FieldType "string" -}}
                {{- $stop = $methodStopString -}}
            {{- else  -}}
                {{- $stop = $methodStopLast -}}
            {{- end -}}
        {{- end -}}

        {{- /* prepare end of line */ -}}
        {{- $footer := $methodFooter -}}
        {{- if eq .FieldType "bool" -}}
            {{- if and (eq $i $lastIndex) (eq $i 0) -}}
                {{- $footer = $methodFooterUniqueBool -}}
            {{- else if and (eq $i $lastIndex) -}}
                {{- $footer = $methodFooterLast -}}
            {{- else if and (eq $i 0) -}}
                {{- $footer = $methodFooterFirstBool -}}
            {{- else -}}
                {{- $footer = $methodFooterBool -}}
            {{- end -}}
        {{- else if eq $i $lastIndex -}}
            {{- $footer = $methodFooterLast -}}
        {{- end -}}

        {{- /* package the line with value */ -}}
        {{- template "fieldValue" dict "FieldType" $field.FieldType "Value" (printf "%s.%s" $.ReceiverName $field.Name ) "JSONName" (printf "\\\"%s\\\":" $field.JSONName) "Header" (print $header) "Footer" (printf $footer) "Start" (print $start) "Stop" (printf $stop) -}}

        {{- if not (eq $previousType "bool") }}
        {{- printf $methodNextLine -}}
        {{- end -}}

    {{end}}
    {{- if or (gt $lastIndex 0) (not (eq $previousType "bool")) -}}
    {{ printf $methodFinalReturn }}
    {{ end }} 
}
{{end}}