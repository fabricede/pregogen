{{- /* Go Template */ -}}
{{define "plus"}}
package {{.Package}}

import (
{{- range $include := .Includes}}
    "{{$include}}"
{{end -}}
)

func ({{.ReceiverName}} {{.TypeName}}) MarshalJSON() ([]byte, error) {
    var b string
    {{$starttxt := false}}
    {{range $i, $field := .Fields}}
    /* field {{$field.Name}} is of type {{ $field.FieldType }} */
    {{if eq $field.FieldType "bool" -}}
    if {{$field.ReceiverName}}.{{$field.Name}} {
        b = {{- if $i -}}b + {{- end -}}"{{- if $starttxt -}}\"{{- end -}}{{- if $i -}}, {{- else -}}{ {{- end -}}\"{{$field.JSONName}}\":true"
    } else {
        b = {{- if $i -}}b + {{- end -}}"{{- if $starttxt -}}\"{{- end -}}{{- if $i -}}, {{- else -}}{ {{- end -}}\"{{$field.JSONName}}\":false"
    }
    {{ else -}}
    b = {{- if $i -}}b + {{- end -}}"{{- if $starttxt -}}\"{{- end -}}{{- if $i -}}, {{- else -}}{ {{- end -}}\"{{$field.JSONName}}\":
    {{- if eq $field.FieldType "string" -}}\"{{- $starttxt = true -}}{{- else -}}{{- $starttxt = false -}}{{- end -}}"
    {{- end -}}
    {{- if eq $field.FieldType "string" -}}
     + {{- template "string" . -}}
    {{else if eq $field.FieldType "bool"}}
    {{- $starttxt = false -}}
    {{- else if or (eq $field.FieldType "int") (eq $field.FieldType "int8") (eq $field.FieldType "int16") (eq $field.FieldType "int32") (eq $field.FieldType "int64") (eq $field.FieldType "uint") (eq $field.FieldType "uint8") (eq $field.FieldType "uint16") (eq $field.FieldType "uint32") (eq $field.FieldType "uint64") -}}
     + {{- template "int" . -}}
    {{- else if eq $field.FieldType "[]byte" -}}
     + {{- template "bytes" . -}}
    {{- else if or (eq $field.FieldType "float32") (eq $field.FieldType "float64") -}}
     + {{- template "float" . -}}
    {{- else -}}
     + {{- template "other" . -}}
    {{end -}}
    {{end -}}
     + "{{- if $starttxt -}}\"{{- end -}}}"
    return []byte(b), nil
}
{{end}}